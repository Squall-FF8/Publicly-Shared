{ =============================
  Virtual Window Layer for CommanderX16
  Created by piecing together 6 sprites 3x2, 64x64 pixels, 8bpp
  created in 11/26/2022
  ==============================}
unit Window;

interface

  procedure winInit;
  procedure winClear(Color: byte);
  procedure winPosition(Xlo: byte registerA; Xhi: byte registerX; Y: byte registerY);
  
  procedure dSetPos(Bank: byte registerA;  X: byte registerX; Y: byte registerY);
  procedure dLineH(Color: byte registerX; Width: byte registerY);
  procedure dLineV(Color: byte registerX; Width: byte registerY);
  procedure winRectangle(X, Y, W, H: byte);
  procedure winCharOut(Code: byte registerX);
  procedure TestText;

  
implementation

const
  spr_VRAM = $1000;  // Sprites initial address in VRAM
  spr_Addr = $FF20;  // Sprites definition in VRAM. Start with sprite #100
  
  Color0 = $C6;  // Blue-ish (Transparent)
  Color1 = $10;  // Black
  Color2 = $18;  // Gray
  Color3 = $01;  // White
  
  fntHeight = 12;  // in pixels
  
var
    // internal variables
  _X: byte;  // X position of the Cursor
  _Y: byte;  // Y position of the Cursor
  vAddress: word;  // Address in VRAM of the Cursor

  fntColors:   array of byte = (Color0, Color1, Color2, Color3);
  fntWidth:    array of byte = (  // in pixels
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $02,$04,$04,$06,$06,$07,$06,$02,$04,$04,$06,$06,$03,$06,$03,$06,
    $07,$04,$07,$06,$07,$06,$07,$06,$07,$07,$03,$03,$05,$05,$05,$08,
    $08,$06,$06,$06,$06,$05,$05,$06,$06,$02,$05,$06,$05,$08,$06,$07,
    $06,$07,$06,$06,$07,$06,$06,$08,$06,$06,$06,$04,$06,$04,$06,$06,
    $03,$05,$05,$05,$05,$05,$05,$05,$05,$02,$04,$05,$03,$06,$05,$05,
    $05,$05,$04,$05,$05,$05,$05,$07,$05,$05,$05,$04,$02,$04,$07
    );
  //fntColumn:   array of byte = (2, 1);  // 1 column = 1 byte
  fntOffsetHi: array of byte = (
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,
    $01,$01,$01,$01,$01,$01,$01,$01,$01,$01,$02,$02,$02,$02,$02,$02,
    $02,$02,$02,$02,$02,$02,$03,$03,$03,$03,$03,$03,$03,$03,$03,$03,
    $03,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$04,$05,$05,$05,$05,
    $05,$05,$05,$05,$05,$05,$05,$05,$06,$06,$06,$06,$06,$06,$06,$06,
    $06,$06,$06,$06,$06,$07,$07,$07,$07,$07,$07,$07,$07,$07,$07
    );
  fntOffsetLo: array of byte = (
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$0C,$18,$24,$3C,$54,$6C,$84,$90,$9C,$A8,$C0,$D8,$E4,$FC,$08,
    $20,$38,$44,$5C,$74,$8C,$A4,$BC,$D4,$EC,$04,$10,$1C,$34,$4C,$64,
    $7C,$94,$AC,$C4,$DC,$F4,$0C,$24,$3C,$54,$60,$78,$90,$A8,$C0,$D8,
    $F0,$08,$20,$38,$50,$68,$80,$98,$B0,$C8,$E0,$F8,$04,$1C,$28,$40,
    $58,$64,$7C,$94,$AC,$C4,$DC,$F4,$0C,$24,$30,$3C,$54,$60,$78,$90,
    $A8,$C0,$D8,$E4,$FC,$14,$2C,$44,$5C,$74,$8C,$A4,$B0,$BC,$C8
    );
  fntLength:   array of byte = (
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $0C,$0C,$0C,$18,$18,$18,$18,$0C,$0C,$0C,$18,$18,$0C,$18,$0C,$18,
    $18,$0C,$18,$18,$18,$18,$18,$18,$18,$18,$0C,$0C,$18,$18,$18,$18,
    $18,$18,$18,$18,$18,$18,$18,$18,$18,$0C,$18,$18,$18,$18,$18,$18,
    $18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$18,$0C,$18,$0C,$18,$18,
    $0C,$18,$18,$18,$18,$18,$18,$18,$18,$0C,$0C,$18,$0C,$18,$18,$18,
    $18,$18,$0C,$18,$18,$18,$18,$18,$18,$18,$18,$0C,$0C,$0C,$18
    );
  fntData:     array of byte = (
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$34,$FD,$FD,
    $FD,$75,$34,$14,$34,$FD,$75,$14,$00,$DD,$DD,$DD,$55,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$03,$40,$37,$40,$FF,$D0,$77,$50,
    $37,$40,$FF,$D0,$77,$50,$35,$40,$14,$00,$00,$00,$0D,$00,$3F,$40,
    $DD,$D0,$7D,$50,$1D,$00,$0F,$40,$0D,$D0,$DD,$D0,$7F,$50,$1D,$40,
    $0D,$00,$05,$00,$3D,$00,$D7,$40,$D3,$40,$7D,$40,$15,$F4,$0F,$54,
    $F5,$40,$57,$D0,$0D,$74,$0D,$34,$07,$D4,$01,$50,$00,$00,$00,$00,
    $3D,$00,$37,$40,$37,$40,$3D,$40,$DD,$D0,$D7,$50,$D3,$D0,$7D,$D0,
    $15,$50,$00,$00,$00,$D0,$D0,$D0,$50,$00,$00,$00,$00,$00,$00,$00,
    $0D,$35,$34,$D4,$D0,$D0,$D0,$D0,$74,$34,$1D,$05,$D0,$74,$34,$1D,
    $0D,$0D,$0D,$0D,$35,$34,$D4,$50,$00,$00,$0D,$00,$DD,$D0,$7F,$50,
    $1D,$40,$3F,$40,$DD,$D0,$5D,$50,$05,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$0D,$00,$0D,$00,$FF,$D0,$5D,$50,
    $0D,$00,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $F4,$74,$D4,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$D0,
    $55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$F4,$F4,$54,$00,$00,$00,$00,$D0,$00,$D0,$03,$40,
    $03,$40,$0D,$40,$0D,$00,$35,$00,$34,$00,$D4,$00,$D0,$00,$50,$00,
    $00,$00,$03,$D0,$0D,$74,$35,$34,$34,$34,$D4,$34,$D0,$34,$D0,$34,
    $74,$D4,$1F,$50,$05,$40,$00,$00,$00,$0D,$3D,$DD,$5D,$0D,$0D,$0D,
    $0D,$0D,$05,$00,$00,$00,$0F,$D0,$35,$74,$14,$34,$00,$D4,$00,$D0,
    $03,$50,$0D,$40,$35,$00,$FF,$F4,$55,$54,$00,$00,$00,$00,$3F,$40,
    $D5,$D0,$50,$D0,$0F,$50,$05,$D0,$00,$D0,$03,$50,$0D,$40,$F5,$00,
    $54,$00,$00,$00,$00,$00,$00,$D0,$03,$D0,$0D,$D0,$35,$D0,$D4,$D0,
    $FF,$F4,$55,$D4,$00,$D0,$00,$D0,$00,$50,$00,$00,$00,$00,$3F,$D0,
    $35,$50,$D4,$00,$FF,$40,$55,$D0,$01,$D0,$03,$50,$0D,$40,$F5,$00,
    $54,$00,$00,$00,$00,$00,$03,$D0,$0D,$50,$35,$00,$3F,$40,$D5,$D0,
    $D0,$74,$D0,$34,$D0,$D4,$7F,$50,$15,$40,$00,$00,$00,$00,$FF,$F0,
    $55,$70,$00,$D0,$03,$50,$0D,$40,$0D,$00,$35,$00,$34,$00,$34,$00,
    $14,$00,$00,$00,$00,$00,$0F,$D0,$35,$74,$34,$D4,$1F,$50,$35,$D0,
    $D4,$74,$D0,$34,$D0,$D4,$7F,$50,$15,$40,$00,$00,$00,$00,$0F,$40,
    $35,$D0,$D4,$74,$D0,$34,$D0,$34,$7D,$D4,$17,$D0,$03,$50,$3D,$40,
    $15,$00,$00,$00,$00,$00,$00,$F4,$F4,$54,$00,$F4,$F4,$54,$00,$00,
    $00,$00,$00,$F4,$F4,$54,$00,$F4,$74,$D4,$50,$00,$00,$00,$00,$00,
    $03,$40,$0D,$40,$35,$00,$D4,$00,$74,$00,$1D,$00,$07,$40,$01,$40,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$40,$55,$40,
    $FF,$40,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $D0,$00,$74,$00,$1D,$00,$07,$40,$0D,$40,$35,$00,$D4,$00,$50,$00,
    $00,$00,$00,$00,$00,$00,$3F,$F4,$F5,$7D,$F4,$3D,$54,$F5,$03,$54,
    $03,$40,$01,$40,$03,$40,$0F,$D0,$07,$50,$01,$40,$0F,$D0,$35,$74,
    $F4,$1D,$D7,$DD,$DD,$DD,$DD,$DD,$DD,$DD,$DF,$F5,$D5,$54,$74,$34,
    $1F,$D4,$05,$50,$00,$00,$03,$D0,$0D,$D0,$0D,$D0,$35,$D0,$34,$D0,
    $D4,$D0,$FF,$D0,$D5,$D0,$D0,$D0,$50,$50,$00,$00,$00,$00,$FF,$40,
    $D5,$D0,$D3,$50,$FD,$40,$D7,$40,$D1,$D0,$D0,$D0,$D0,$D0,$FF,$50,
    $55,$40,$00,$00,$00,$00,$0F,$40,$35,$D0,$34,$50,$D4,$00,$D0,$00,
    $D0,$00,$D0,$00,$74,$D0,$1F,$50,$05,$40,$00,$00,$00,$00,$F4,$00,
    $DD,$00,$D7,$40,$D3,$40,$D1,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$FF,$50,
    $55,$40,$00,$00,$00,$00,$FF,$40,$D5,$40,$D0,$00,$FF,$40,$D5,$40,
    $D0,$00,$D0,$00,$D0,$00,$FF,$40,$55,$40,$00,$00,$00,$00,$FF,$40,
    $D5,$40,$D0,$00,$FF,$40,$D5,$40,$D0,$00,$D0,$00,$D0,$00,$D0,$00,
    $50,$00,$00,$00,$00,$00,$03,$D0,$0D,$50,$35,$00,$34,$00,$D7,$D0,
    $D1,$D0,$D0,$D0,$D0,$D0,$7F,$D0,$15,$50,$00,$00,$00,$00,$D0,$D0,
    $D0,$D0,$D0,$D0,$FF,$D0,$D5,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,
    $50,$50,$00,$00,$00,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$50,$00,
    $00,$00,$03,$40,$03,$40,$03,$40,$03,$40,$03,$40,$03,$40,$03,$40,
    $03,$40,$0D,$40,$F5,$00,$54,$00,$00,$00,$D0,$D0,$D0,$D0,$D3,$50,
    $FD,$40,$DD,$00,$D7,$40,$D3,$40,$D1,$D0,$D0,$D0,$50,$50,$00,$00,
    $00,$00,$D0,$00,$D0,$00,$D0,$00,$D0,$00,$D0,$00,$D0,$00,$D0,$00,
    $D0,$00,$FF,$40,$55,$40,$00,$00,$00,$00,$34,$34,$34,$34,$3D,$F4,
    $DF,$DD,$D7,$5D,$D3,$4D,$D1,$4D,$D0,$0D,$D0,$0D,$50,$05,$00,$00,
    $00,$00,$D0,$D0,$F4,$D0,$DD,$D0,$D7,$D0,$D1,$D0,$D0,$D0,$D0,$D0,
    $D0,$D0,$D0,$D0,$50,$50,$00,$00,$00,$00,$0F,$40,$35,$D0,$D4,$74,
    $D0,$34,$D0,$34,$D0,$34,$D0,$34,$74,$D4,$1F,$50,$05,$40,$00,$00,
    $00,$00,$FF,$40,$D5,$D0,$D0,$D0,$D3,$50,$FD,$40,$D5,$00,$D0,$00,
    $D0,$00,$D0,$00,$50,$00,$00,$00,$00,$00,$0F,$40,$35,$D0,$D4,$74,
    $D0,$34,$D0,$34,$D0,$34,$D3,$74,$75,$D4,$1F,$74,$05,$54,$00,$00,
    $00,$00,$FF,$40,$D5,$D0,$D0,$D0,$D3,$50,$FD,$40,$DD,$00,$D7,$40,
    $D3,$40,$D1,$D0,$50,$50,$00,$00,$00,$00,$3F,$D0,$D5,$50,$D0,$00,
    $74,$00,$1D,$00,$07,$40,$01,$D0,$C0,$D0,$7F,$50,$15,$40,$00,$00,
    $00,$00,$3F,$FC,$D7,$54,$53,$40,$03,$40,$03,$40,$03,$40,$03,$40,
    $03,$40,$03,$40,$01,$40,$00,$00,$00,$00,$34,$D0,$34,$D0,$34,$D0,
    $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$7F,$50,$15,$40,$00,$00,
    $00,$00,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$74,$D0,$34,$D0,
    $1D,$D0,$07,$40,$01,$40,$00,$00,$00,$00,$D0,$0D,$D0,$0D,$D0,$0D,
    $D3,$4D,$D3,$4D,$DF,$DD,$7D,$F5,$35,$74,$34,$34,$14,$14,$00,$00,
    $00,$00,$D0,$D0,$74,$D0,$37,$50,$1D,$40,$0D,$00,$37,$40,$37,$40,
    $D1,$D0,$D0,$D0,$50,$50,$00,$00,$00,$00,$D0,$D0,$D0,$D0,$D0,$D0,
    $D3,$50,$77,$40,$1D,$40,$0D,$00,$0D,$00,$0D,$00,$05,$00,$00,$00,
    $00,$00,$3F,$D0,$15,$D0,$03,$50,$03,$40,$0D,$40,$35,$00,$34,$00,
    $D4,$00,$FF,$D0,$55,$50,$00,$00,$FD,$D5,$D0,$D0,$D0,$D0,$D0,$D0,
    $D0,$D0,$FD,$55,$00,$00,$D0,$00,$D0,$00,$34,$00,$34,$00,$0D,$00,
    $0D,$00,$03,$40,$03,$40,$00,$D0,$00,$D0,$00,$50,$FD,$5D,$0D,$0D,
    $0D,$0D,$0D,$0D,$0D,$0D,$FD,$55,$0D,$00,$37,$40,$37,$40,$D5,$D0,
    $D0,$D0,$50,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$FF,$D0,$55,$50,$F4,$74,$D4,$50,$00,$00,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00,$17,$40,$0F,$40,
    $37,$40,$D7,$40,$D3,$40,$7F,$40,$15,$40,$00,$00,$00,$00,$D0,$00,
    $D0,$00,$D0,$00,$DD,$00,$F7,$40,$D7,$40,$D3,$40,$D3,$40,$FD,$40,
    $55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00,$D7,$40,
    $D1,$40,$D0,$00,$D3,$40,$7D,$40,$15,$00,$00,$00,$00,$00,$03,$40,
    $03,$40,$03,$40,$0F,$40,$37,$40,$D7,$40,$D3,$40,$D3,$40,$7F,$40,
    $15,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3D,$00,$D7,$40,
    $FF,$40,$D5,$40,$D3,$40,$7D,$40,$15,$00,$00,$00,$00,$00,$0F,$40,
    $35,$40,$34,$00,$FF,$40,$75,$40,$34,$00,$34,$00,$34,$00,$34,$00,
    $14,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$40,$D7,$40,
    $D3,$40,$D3,$40,$7F,$40,$17,$40,$3D,$40,$15,$00,$00,$00,$D0,$00,
    $D0,$00,$D0,$00,$FD,$00,$D7,$40,$D3,$40,$D3,$40,$D3,$40,$D3,$40,
    $51,$40,$00,$00,$00,$00,$D0,$50,$D0,$D0,$D0,$D0,$D0,$D0,$50,$00,
    $00,$00,$0D,$05,$0D,$0D,$0D,$0D,$0D,$35,$D4,$50,$00,$00,$D0,$00,
    $D0,$00,$D0,$00,$D3,$40,$D3,$40,$FD,$40,$DD,$00,$D7,$40,$D3,$40,
    $51,$40,$00,$00,$00,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$74,$14,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$F7,$40,$DD,$D0,$DD,$D0,$DD,$D0,
    $DD,$D0,$DD,$D0,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $FD,$00,$D7,$40,$D3,$40,$D3,$40,$D3,$40,$D3,$40,$51,$40,$00,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$3D,$00,$D7,$40,$D3,$40,$D3,$40,
    $D3,$40,$7D,$40,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,
    $FD,$00,$D7,$40,$D3,$40,$D3,$40,$FD,$40,$D5,$00,$D0,$00,$50,$00,
    $00,$00,$00,$00,$00,$00,$00,$00,$3F,$40,$D7,$40,$D3,$40,$D3,$40,
    $7F,$40,$17,$40,$03,$40,$01,$40,$00,$00,$00,$00,$DF,$F5,$D4,$D0,
    $D0,$D0,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$40,$D5,$40,
    $74,$00,$1D,$00,$07,$40,$FD,$40,$55,$00,$00,$00,$00,$00,$00,$00,
    $34,$00,$34,$00,$FF,$40,$75,$40,$34,$00,$34,$00,$34,$00,$1F,$40,
    $05,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D3,$40,$D3,$40,
    $D3,$40,$D3,$40,$D3,$40,$7D,$40,$15,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$D3,$40,$D3,$40,$DD,$40,$DD,$00,$75,$00,$34,$00,
    $14,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DD,$34,$DD,$34,
    $DD,$D4,$DD,$D0,$77,$50,$37,$40,$15,$40,$00,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$D3,$40,$77,$40,$1D,$40,$3D,$00,$37,$40,$D3,$40,
    $51,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$D3,$40,$D3,$40,
    $D3,$40,$D3,$40,$7F,$40,$17,$40,$3D,$40,$15,$00,$00,$00,$00,$00,
    $00,$00,$00,$00,$FF,$40,$57,$40,$0D,$40,$35,$00,$D4,$00,$FF,$40,
    $55,$40,$00,$00,$0D,$35,$34,$34,$34,$D4,$74,$34,$34,$34,$1D,$05,
    $D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$D0,$50,$D0,$74,$34,$34,
    $34,$1D,$35,$34,$34,$34,$D4,$50,$00,$00,$00,$00,$00,$00,$00,$00,
    $00,$00,$3D,$34,$D7,$D4,$51,$50,$00,$00,$00,$00,$00,$00,$00,$00
    );
  
{      $00, $00, $D0, $D0, $D0, $D0, $D0, $D0, $FF, $D0, $D5, $D0,  // H
    $D0, $D0, $D0, $D0, $D0, $D0, $D0, $D0, $50, $50, $00, $00,
    $0D, $34, $34, $D0, $D0, $D0, $D0, $D0, $D0, $34, $34, $0D,  // (
    $55, $55, $54, $6A, $BA, $A4, $6A, $BA, $A4, $6A, $BA, $A4,  // shield
    $6A, $9A, $A4, $7F, $57, $f4, $6A, $9A, $A4, $1A, $BA, $90,
    $06, $BA, $40, $01, $B9, $00, $00, $74, $00, $00, $10, $00 );
}  
  // Sprites
  spr_Attr: []byte = [
    $80, $80, 100, 0, 100, 0, $0C, $F0,
    $00, $81, 164, 0, 100, 0, $0C, $F0,
    $80, $81, 228, 0, 100, 0, $0C, $F0,
    $00, $82, 100, 0, 164, 0, $0C, $F0,
    $80, $82, 164, 0, 164, 0, $0C, $F0,
    $00, $83, 228, 0, 164, 0, $0C, $F0];


procedure winInit;
begin
  vSetAddress($11, spr_Addr.High, spr_Addr.Low);
  vCopy((@spr_Attr).High, (@spr_Attr).Low, spr_Attr.Length);
end; 


procedure winClear(Color: byte);
begin
  vSetAddress($10, spr_VRAM.High, spr_VRAM.Low);
  vFill256(Color, 96);
end; 


procedure winPosition(Xlo: byte registerA; Xhi: byte registerX; Y: byte registerY);
begin
  asm 
          STA spr_Attr + 2 
          STA spr_Attr + 26
          STX spr_Attr + 3
          STX spr_Attr + 27
          STY spr_Attr + 4
          STY spr_Attr + 12
          STY spr_Attr + 20

          CLC
          ADC #64
          STA spr_Attr + 10
          STA spr_Attr + 34
          BCC skip
          INX
 skip:    STX spr_Attr + 11
          STX spr_Attr + 35

          CLC
          ADC #64
          STA spr_Attr + 18
          STA spr_Attr + 42
          BCC skip1
          INX
 skip1:   STX spr_Attr + 19
          STX spr_Attr + 43
          
          TYA
          CLC
          ADC #64
          STA spr_Attr + 28
          STA spr_Attr + 36
          STA spr_Attr + 44
  end; 
end; 




  procedure dSetPos(Bank: byte registerA;  X: byte registerX; Y: byte registerY);
    // Address = $1000 (1 + x div 64) + $3000 (y div 64) + (x mod 64) + (y mod 64) * 64
  const
    tmp = $02;
  begin
    asm
        STA vAddrBank
        
	      TXA
        AND #%11000000  ; X div 64
        LSR
        LSR
        CLC
        ADC #$10         ; add $1000
        CPY #64
        BCC skip
        CLC
        ADC #$30         ; add $3000 if y >=64
  skip: STA tmp
  
        TXA
        AND #%00111111  ; X mod 64
        STA tmp + 1
        
        TYA
        STZ tmp + 2
        ;AND #%00111111  ; Y mod 64
        ASL
        ASL
        ASL
        ROL tmp + 2 
        ASL
        ROL tmp + 2
        ASL
        ROL tmp + 2 
        ASL
        ROL tmp + 2     ; x 64
        
        CLC
        ADC tmp + 1
        STA vAddrLo
        
        LDA tmp
        ADC tmp +2
        STA vAddrHi
    end; 
  end; 
  
  procedure dLineH(Color: byte registerX; Width: byte registerY);
  const
    dY  = $FC0;
  begin
    asm
 loop0: LDA #%00111111  
 loop1: STX vData1
        DEY
        BEQ fin
        BIT vAddrLo
        BNE loop1
        
        CLC
        LDA vAddrLo
        ADC #dY.Low
        STA vAddrLo
        LDA vAddrHi
        ADC #dY.High
        STA vAddrHi
        BRA loop0
 fin:       
    end; 
  end;
  

  procedure dLineV(Color: byte registerX; Width: byte registerY);
  const
    dY  = $2000;
  begin
    asm
        LDA vAddrHi
 loop0: AND #%11110000
        CLC
        ADC #$10
 loop1: STX vData1
        DEY
        BEQ fin
        CMP vAddrHi
        BNE loop1
        
        CLC
        ;LDA vAddrLo
        ;ADC #dY.Low
        ;STA vAddrLo
        LDA vAddrHi
        ADC #dY.High
        STA vAddrHi
        BRA loop0
 fin:       
    end; 
  end;
  
  procedure winRectangle(X, Y, W, H: byte);
  begin
    dSetPos($10, X, Y);
    dLineH(Color1, W-1);
    vAddrBank := $70;
    dLineV(Color1, H);
    dSetPos($70, X, Y+1);
    dLineV(Color1, H-2);
    vAddrBank := $10;
    dLineH(Color1, W-1);
  end; 

  
procedure winCharOut(Code: byte registerX);
  var addr: word absolute $02;  // ptr to the data
      tmp:  byte absolute $04;  // contain font pixels 
      len:  byte absolute $05;  // length of font data
      col:  byte absolute $06;  // columns (aka bytes per row)
      w:    byte absolute $07;  // width in pixels
      chr:  byte absolute $08;  // code of a char
      ind:  byte absolute $09;  // index to byte from font data
      vram: word absolute $0A;  // temp store for VRAM address
begin
  asm
          LDA vAddrLo
          STA vram
          LDA vAddrHi
          STA vram + 1
          CLC
          LDA fntOffsetLo, X
          ADC #<fntData
          STA addr
          LDA fntOffsetHi, X
          ADC #>fntData
          STA addr + 1
          LDA fntLength, X
          STA len
          STX chr
          STZ ind

 loop3:   LDX chr
          ;LDA fntColumn, X
          ;STA col
          LDA fntWidth, X
          STA w

 loop2:   LDY ind
          LDA (addr), Y
          STA tmp
          LDY #4              ; max 4 pixels in a byte
 loop1:   LDA #0
          ASL tmp
          ROL
          ASL tmp
          ROL
          TAX
          LDA fntColors, X
          STA vData1
          DEC w
          BEQ NewRow
          DEY
          BNE loop1

          INC ind
          BRA loop2

 NewRow:  INC ind
          LDY ind
          CPY len
          BCS finish
          CLC
          LDA vram
          ADC #64
          STA vram
          STA vAddrLo
          BCC loop3
          INC vram +1
          INC vAddrHi
          BRA loop3
 finish: 
  end; 
end;


procedure TestText;
  var i: byte;
      X: byte;
      tmp: word;
begin
  tmp := vAddress;
  X := 1;
  for i := 96 to 126 do
    dSetPos($10, X, 30);
    X := X + fntWidth[i] + 1;
    winCharOut(i);
  end;
end; 
  
end.
